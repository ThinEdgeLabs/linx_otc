/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as LendingMarketplaceContractJson } from "../LendingMarketplace.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace LendingMarketplaceTypes {
  export type Fields = {
    lendingOfferTemplateId: HexString;
    admin: Address;
    totalLendingOffers: bigint;
    feeRate: bigint;
    lendingEnabled: boolean;
  };

  export type State = ContractState<Fields>;

  export type AdminUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;
  export type LoanDetailsEvent = ContractEvent<{
    loanId: HexString;
    lendingTokenId: HexString;
    collateralTokenId: HexString;
    lendingAmount: bigint;
    collateralAmount: bigint;
    interestRate: bigint;
    duration: bigint;
    lender: Address;
  }>;
  export type LoanCreatedEvent = ContractEvent<{
    loanId: HexString;
    id: bigint;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanCancelledEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanPaidEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanAcceptedEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanLiquidatedEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    blockTimeStampInSeconds: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    calculateInterestPayment: {
      params: CallContractParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateTotalInterestPayment: {
      params: CallContractParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMarketplaceFee: {
      params: CallContractParams<{ amount: bigint; feeRateValue: bigint }>;
      result: CallContractResult<bigint>;
    };
    getAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getTotalLendingOffers: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getFeeRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    createLendingOffer: {
      params: CallContractParams<{
        lendingTokenId: HexString;
        collateralTokenId: HexString;
        lendingAmount: bigint;
        collateralAmount: bigint;
        interestRate: bigint;
        duration: bigint;
      }>;
      result: CallContractResult<Address>;
    };
    borrow: {
      params: CallContractParams<{ offerId: HexString }>;
      result: CallContractResult<null>;
    };
    cancelOffer: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    paybackLoan: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    liquidateLoan: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    updateAdmin: {
      params: CallContractParams<{ newAdmin: Address }>;
      result: CallContractResult<null>;
    };
    updateFeeRate: {
      params: CallContractParams<{ value: bigint }>;
      result: CallContractResult<null>;
    };
    updateLendingEnabled: {
      params: CallContractParams<{ value: boolean }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{
        to: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ tokenId: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    blockTimeStampInSeconds: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateInterestPayment: {
      params: SignExecuteContractMethodParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateTotalInterestPayment: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateMarketplaceFee: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        feeRateValue: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalLendingOffers: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getFeeRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createLendingOffer: {
      params: SignExecuteContractMethodParams<{
        lendingTokenId: HexString;
        collateralTokenId: HexString;
        lendingAmount: bigint;
        collateralAmount: bigint;
        interestRate: bigint;
        duration: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{ offerId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    cancelOffer: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    paybackLoan: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    liquidateLoan: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateAdmin: {
      params: SignExecuteContractMethodParams<{ newAdmin: Address }>;
      result: SignExecuteScriptTxResult;
    };
    updateFeeRate: {
      params: SignExecuteContractMethodParams<{ value: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    updateLendingEnabled: {
      params: SignExecuteContractMethodParams<{ value: boolean }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        to: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LendingMarketplaceInstance,
  LendingMarketplaceTypes.Fields
> {
  encodeFields(fields: LendingMarketplaceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as LendingMarketplaceTypes.Fields;
  }

  eventIndex = {
    AdminUpdated: 0,
    LoanDetails: 1,
    LoanCreated: 2,
    LoanCancelled: 3,
    LoanPaid: 4,
    LoanAccepted: 5,
    LoanLiquidated: 6,
  };
  consts = {
    Day: BigInt("86400"),
    ErrorCodes: {
      AdminAllowedOnly: BigInt("0"),
      LendingDisabled: BigInt("1"),
      LenderAllowedOnly: BigInt("2"),
      BorrowerAllowedOnly: BigInt("3"),
      LenderNotAllowed: BigInt("4"),
    },
  };

  at(address: string): LendingMarketplaceInstance {
    return new LendingMarketplaceInstance(address);
  }

  tests = {
    blockTimeStampInSeconds: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "blockTimeStampInSeconds",
        params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        {
          currentBlockTimeStamp: bigint;
          loanTimestamp: bigint;
          amount: bigint;
          interest: bigint;
          days: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; interest: bigint; days: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; feeRateValue: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getAdmin: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getAdmin", params, getContractByCodeHash);
    },
    getTotalLendingOffers: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getTotalLendingOffers",
        params,
        getContractByCodeHash
      );
    },
    getFeeRate: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getFeeRate", params, getContractByCodeHash);
    },
    createLendingOffer: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        {
          lendingTokenId: HexString;
          collateralTokenId: HexString;
          lendingAmount: bigint;
          collateralAmount: bigint;
          interestRate: bigint;
          duration: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(
        this,
        "createLendingOffer",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { offerId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    cancelOffer: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancelOffer", params, getContractByCodeHash);
    },
    paybackLoan: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "paybackLoan", params, getContractByCodeHash);
    },
    liquidateLoan: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "liquidateLoan", params, getContractByCodeHash);
    },
    updateAdmin: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { newAdmin: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateAdmin", params, getContractByCodeHash);
    },
    updateFeeRate: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { value: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateFeeRate", params, getContractByCodeHash);
    },
    updateLendingEnabled: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { value: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateLendingEnabled",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { to: Address; tokenId: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParamsWithoutMaps<
        LendingMarketplaceTypes.Fields,
        { tokenId: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const LendingMarketplace = new Factory(
  Contract.fromJson(
    LendingMarketplaceContractJson,
    "",
    "56c6207221f5edab2503e22c71e33cd527a225d24db46d19ea458264dd3a33aa",
    []
  )
);

// Use this class to interact with the blockchain
export class LendingMarketplaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LendingMarketplaceTypes.State> {
    return fetchContractState(LendingMarketplace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminUpdatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.AdminUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "AdminUpdated",
      fromCount
    );
  }

  subscribeLoanDetailsEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanDetailsEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanDetails",
      fromCount
    );
  }

  subscribeLoanCreatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanCreated",
      fromCount
    );
  }

  subscribeLoanCancelledEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanCancelledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanCancelled",
      fromCount
    );
  }

  subscribeLoanPaidEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanPaidEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanPaid",
      fromCount
    );
  }

  subscribeLoanAcceptedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanAcceptedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanAccepted",
      fromCount
    );
  }

  subscribeLoanLiquidatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanLiquidatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanLiquidated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LendingMarketplaceTypes.AdminUpdatedEvent
      | LendingMarketplaceTypes.LoanDetailsEvent
      | LendingMarketplaceTypes.LoanCreatedEvent
      | LendingMarketplaceTypes.LoanCancelledEvent
      | LendingMarketplaceTypes.LoanPaidEvent
      | LendingMarketplaceTypes.LoanAcceptedEvent
      | LendingMarketplaceTypes.LoanLiquidatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LendingMarketplace.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    blockTimeStampInSeconds: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"blockTimeStampInSeconds">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "blockTimeStampInSeconds",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateTotalInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateMarketplaceFee">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getAdmin: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getAdmin">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getAdmin">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalLendingOffers: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getTotalLendingOffers">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"getTotalLendingOffers">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "getTotalLendingOffers",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getFeeRate: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getFeeRate">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getFeeRate">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getFeeRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createLendingOffer: async (
      params: LendingMarketplaceTypes.CallMethodParams<"createLendingOffer">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"createLendingOffer">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "createLendingOffer",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: LendingMarketplaceTypes.CallMethodParams<"borrow">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"borrow">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "borrow",
        params,
        getContractByCodeHash
      );
    },
    cancelOffer: async (
      params: LendingMarketplaceTypes.CallMethodParams<"cancelOffer">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"cancelOffer">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "cancelOffer",
        params,
        getContractByCodeHash
      );
    },
    paybackLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"paybackLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"paybackLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "paybackLoan",
        params,
        getContractByCodeHash
      );
    },
    liquidateLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"liquidateLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"liquidateLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "liquidateLoan",
        params,
        getContractByCodeHash
      );
    },
    updateAdmin: async (
      params: LendingMarketplaceTypes.CallMethodParams<"updateAdmin">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"updateAdmin">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "updateAdmin",
        params,
        getContractByCodeHash
      );
    },
    updateFeeRate: async (
      params: LendingMarketplaceTypes.CallMethodParams<"updateFeeRate">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"updateFeeRate">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "updateFeeRate",
        params,
        getContractByCodeHash
      );
    },
    updateLendingEnabled: async (
      params: LendingMarketplaceTypes.CallMethodParams<"updateLendingEnabled">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"updateLendingEnabled">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "updateLendingEnabled",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: LendingMarketplaceTypes.CallMethodParams<"withdraw">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: LendingMarketplaceTypes.CallMethodParams<"deposit">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    blockTimeStampInSeconds: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"blockTimeStampInSeconds">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "blockTimeStampInSeconds",
        params
      );
    },
    calculateInterestPayment: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateInterestPayment">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateInterestPayment",
        params
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateTotalInterestPayment">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateTotalInterestPayment",
        params
      );
    },
    calculateMarketplaceFee: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateMarketplaceFee">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateMarketplaceFee",
        params
      );
    },
    getAdmin: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getAdmin">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"getAdmin">> => {
      return signExecuteMethod(LendingMarketplace, this, "getAdmin", params);
    },
    getTotalLendingOffers: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getTotalLendingOffers">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getTotalLendingOffers">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getTotalLendingOffers",
        params
      );
    },
    getFeeRate: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getFeeRate">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getFeeRate">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "getFeeRate", params);
    },
    createLendingOffer: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"createLendingOffer">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"createLendingOffer">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "createLendingOffer",
        params
      );
    },
    borrow: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"borrow">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(LendingMarketplace, this, "borrow", params);
    },
    cancelOffer: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"cancelOffer">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"cancelOffer">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "cancelOffer", params);
    },
    paybackLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"paybackLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"paybackLoan">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "paybackLoan", params);
    },
    liquidateLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"liquidateLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"liquidateLoan">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "liquidateLoan",
        params
      );
    },
    updateAdmin: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"updateAdmin">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"updateAdmin">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "updateAdmin", params);
    },
    updateFeeRate: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"updateFeeRate">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"updateFeeRate">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "updateFeeRate",
        params
      );
    },
    updateLendingEnabled: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"updateLendingEnabled">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"updateLendingEnabled">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "updateLendingEnabled",
        params
      );
    },
    withdraw: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(LendingMarketplace, this, "withdraw", params);
    },
    deposit: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"deposit">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(LendingMarketplace, this, "deposit", params);
    },
  };

  async multicall<Calls extends LendingMarketplaceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LendingMarketplaceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      LendingMarketplace,
      this,
      calls,
      getContractByCodeHash
    )) as LendingMarketplaceTypes.MultiCallResults<Calls>;
  }
}
