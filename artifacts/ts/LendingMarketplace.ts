/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as LendingMarketplaceContractJson } from "../LendingMarketplace.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace LendingMarketplaceTypes {
  export type Fields = {
    lendingOfferTemplateId: HexString;
    admin: Address;
    totalLendingOffers: bigint;
    fee: bigint;
    lendingEnabled: boolean;
  };

  export type State = ContractState<Fields>;

  export type AdminUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;
  export type OfferCreatedEvent = ContractEvent<{
    lendingTokenId: HexString;
    collateralTokenId: HexString;
    lendingAmount: bigint;
    collateralAmount: bigint;
    interestRate: bigint;
    duration: bigint;
    lender: Address;
    lendingOfferContractId: HexString;
  }>;
  export type OfferCancelledEvent = ContractEvent<{ offerId: HexString }>;

  export interface CallMethodTable {
    blockTimeStampInSeconds: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    calculateInterestPayment: {
      params: CallContractParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateTotalInterestPayment: {
      params: CallContractParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMarketplaceFee: {
      params: CallContractParams<{ amount: bigint; feeRate: bigint }>;
      result: CallContractResult<bigint>;
    };
    getAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getTotalLendingOffers: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    createLendingOffer: {
      params: CallContractParams<{
        lendingTokenId: HexString;
        collateralTokenId: HexString;
        lendingAmount: bigint;
        collateralAmount: bigint;
        interestRate: bigint;
        duration: bigint;
      }>;
      result: CallContractResult<Address>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  LendingMarketplaceInstance,
  LendingMarketplaceTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as LendingMarketplaceTypes.Fields;
  }

  eventIndex = { AdminUpdated: 0, OfferCreated: 1, OfferCancelled: 2 };
  consts = {
    Day: BigInt(86400),
    ErrorCodes: {
      AdminAllowedOnly: BigInt(0),
      LendingDisabled: BigInt(1),
      LenderAllowedOnly: BigInt(2),
    },
  };

  at(address: string): LendingMarketplaceInstance {
    return new LendingMarketplaceInstance(address);
  }

  tests = {
    blockTimeStampInSeconds: async (
      params: Omit<
        TestContractParams<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "blockTimeStampInSeconds", params);
    },
    calculateInterestPayment: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        {
          currentBlockTimeStamp: bigint;
          loanTimestamp: bigint;
          amount: bigint;
          interest: bigint;
          days: bigint;
        }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "calculateInterestPayment", params);
    },
    calculateTotalInterestPayment: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; interest: bigint; days: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "calculateTotalInterestPayment", params);
    },
    calculateMarketplaceFee: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; feeRate: bigint }
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "calculateMarketplaceFee", params);
    },
    getAdmin: async (
      params: Omit<
        TestContractParams<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "getAdmin", params);
    },
    getTotalLendingOffers: async (
      params: Omit<
        TestContractParams<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalLendingOffers", params);
    },
    getFee: async (
      params: Omit<
        TestContractParams<LendingMarketplaceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getFee", params);
    },
    createLendingOffer: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        {
          lendingTokenId: HexString;
          collateralTokenId: HexString;
          lendingAmount: bigint;
          collateralAmount: bigint;
          interestRate: bigint;
          duration: bigint;
        }
      >
    ): Promise<TestContractResult<Address>> => {
      return testMethod(this, "createLendingOffer", params);
    },
    cancelOffer: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { offerId: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "cancelOffer", params);
    },
    updateAdmin: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { newAdmin: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateAdmin", params);
    },
    updateFee: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { newFee: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateFee", params);
    },
    updateLendingEnabled: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { enabled: boolean }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "updateLendingEnabled", params);
    },
  };
}

// Use this object to test and deploy the contract
export const LendingMarketplace = new Factory(
  Contract.fromJson(
    LendingMarketplaceContractJson,
    "",
    "bb8794dbb6cb2b280d2459a0e7fd8560ea220372df8b1b488733f8186eef2712"
  )
);

// Use this class to interact with the blockchain
export class LendingMarketplaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LendingMarketplaceTypes.State> {
    return fetchContractState(LendingMarketplace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminUpdatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.AdminUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "AdminUpdated",
      fromCount
    );
  }

  subscribeOfferCreatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.OfferCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "OfferCreated",
      fromCount
    );
  }

  subscribeOfferCancelledEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.OfferCancelledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "OfferCancelled",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LendingMarketplaceTypes.AdminUpdatedEvent
      | LendingMarketplaceTypes.OfferCreatedEvent
      | LendingMarketplaceTypes.OfferCancelledEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LendingMarketplace.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    blockTimeStampInSeconds: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"blockTimeStampInSeconds">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "blockTimeStampInSeconds",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateTotalInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateMarketplaceFee">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getAdmin: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getAdmin">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getAdmin">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalLendingOffers: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getTotalLendingOffers">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"getTotalLendingOffers">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "getTotalLendingOffers",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getFee: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getFee">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getFee">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createLendingOffer: async (
      params: LendingMarketplaceTypes.CallMethodParams<"createLendingOffer">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"createLendingOffer">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "createLendingOffer",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends LendingMarketplaceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LendingMarketplaceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      LendingMarketplace,
      this,
      calls,
      getContractByCodeHash
    )) as LendingMarketplaceTypes.MultiCallResults<Calls>;
  }
}
