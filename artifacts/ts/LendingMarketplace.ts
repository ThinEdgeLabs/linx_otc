/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as LendingMarketplaceContractJson } from "../LendingMarketplace.ral.json";
import { getContractByCodeHash } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace LendingMarketplaceTypes {
  export type Fields = {
    loanTemplateId: HexString;
    totalLoans: bigint;
    feeRate: bigint;
    lendingEnabled: boolean;
    upgradeDelay: bigint;
    owner: Address;
    newOwner: Address;
    upgradeInitiated: bigint;
    newCode: HexString;
    newImmFieldsEncoded: HexString;
    newMutFieldsEncoded: HexString;
  };

  export type State = ContractState<Fields>;

  export type ChangeOwnerInitiatedEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type ChangeOwnerApplyEvent = ContractEvent<{
    owner: Address;
    changeOwner: Address;
  }>;
  export type MigrateInitiatedEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
  }>;
  export type MigrateWithFieldsInitiatedEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type MigrateWithFieldsApplyEvent = ContractEvent<{
    owner: Address;
    changeCode: HexString;
    changeImmFieldsEncoded: HexString;
    changeMutFieldsEncoded: HexString;
  }>;
  export type LoanCreatedEvent = ContractEvent<{
    loanId: HexString;
    id: bigint;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanDetailsEvent = ContractEvent<{
    loanId: HexString;
    lendingTokenId: HexString;
    collateralTokenId: HexString;
    lendingAmount: bigint;
    collateralAmount: bigint;
    interestRate: bigint;
    duration: bigint;
    lender: Address;
  }>;
  export type LoanCancelledEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanPaidEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanAcceptedEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;
  export type LoanLiquidatedEvent = ContractEvent<{
    loanId: HexString;
    by: Address;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    changeOwner: {
      params: CallContractParams<{ changeOwner: Address }>;
      result: CallContractResult<null>;
    };
    migrate: {
      params: CallContractParams<{ changeCode: HexString }>;
      result: CallContractResult<null>;
    };
    migrateWithFields: {
      params: CallContractParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: CallContractResult<null>;
    };
    changeOwnerApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    migrateWithFieldsApply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    resetUpgrade: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    blockTimeStampInSeconds: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    calculateInterestPayment: {
      params: CallContractParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateTotalInterestPayment: {
      params: CallContractParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMarketplaceFee: {
      params: CallContractParams<{ amount: bigint; feeRateValue: bigint }>;
      result: CallContractResult<bigint>;
    };
    getUpgradeDelay: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getNewOwner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getUpgradeInitiated: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getNewCode: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewImmFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getNewMutFieldsEncoded: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getTotalLoans: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getFeeRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    createLoan: {
      params: CallContractParams<{
        lendingTokenId: HexString;
        collateralTokenId: HexString;
        lendingAmount: bigint;
        collateralAmount: bigint;
        interestRate: bigint;
        duration: bigint;
      }>;
      result: CallContractResult<Address>;
    };
    borrow: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    cancelLoan: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    repayLoan: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    liquidateLoan: {
      params: CallContractParams<{ loanId: HexString }>;
      result: CallContractResult<null>;
    };
    updateFeeRate: {
      params: CallContractParams<{ value: bigint }>;
      result: CallContractResult<null>;
    };
    pauseLending: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    enableLending: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{
        to: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ tokenId: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    addFeeToken: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    removeFeeToken: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    isFeeToken: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    changeOwner: {
      params: SignExecuteContractMethodParams<{ changeOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    migrate: {
      params: SignExecuteContractMethodParams<{ changeCode: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFields: {
      params: SignExecuteContractMethodParams<{
        changeCode: HexString;
        changeImmFieldsEncoded: HexString;
        changeMutFieldsEncoded: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    changeOwnerApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    migrateWithFieldsApply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    resetUpgrade: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    blockTimeStampInSeconds: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateInterestPayment: {
      params: SignExecuteContractMethodParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateTotalInterestPayment: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateMarketplaceFee: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        feeRateValue: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeDelay: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewOwner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getUpgradeInitiated: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewCode: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewImmFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNewMutFieldsEncoded: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalLoans: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getFeeRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createLoan: {
      params: SignExecuteContractMethodParams<{
        lendingTokenId: HexString;
        collateralTokenId: HexString;
        lendingAmount: bigint;
        collateralAmount: bigint;
        interestRate: bigint;
        duration: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    cancelLoan: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    repayLoan: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    liquidateLoan: {
      params: SignExecuteContractMethodParams<{ loanId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateFeeRate: {
      params: SignExecuteContractMethodParams<{ value: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    pauseLending: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    enableLending: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        to: Address;
        tokenId: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    addFeeToken: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    removeFeeToken: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    isFeeToken: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LendingMarketplaceInstance,
  LendingMarketplaceTypes.Fields
> {
  encodeFields(fields: LendingMarketplaceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as LendingMarketplaceTypes.Fields;
  }

  eventIndex = {
    ChangeOwnerInitiated: 0,
    ChangeOwnerApply: 1,
    MigrateInitiated: 2,
    MigrateApply: 3,
    MigrateWithFieldsInitiated: 4,
    MigrateWithFieldsApply: 5,
    LoanCreated: 6,
    LoanDetails: 7,
    LoanCancelled: 8,
    LoanPaid: 9,
    LoanAccepted: 10,
    LoanLiquidated: 11,
  };
  consts = {
    Day: BigInt("86400"),
    UpgradeErrorCodes: {
      OwnerAllowedOnly: BigInt("13000"),
      UpgradePending: BigInt("13001"),
      UpgradeNotPending: BigInt("13002"),
      UpgradeDelayNotExpired: BigInt("13003"),
      MigrateNotPending: BigInt("13004"),
      MigrateWithFieldsNotPending: BigInt("13005"),
      ChangeOwnerNotPending: BigInt("13006"),
    },
    ErrorCodes: {
      LendingDisabled: BigInt("0"),
      LenderAllowedOnly: BigInt("1"),
      BorrowerAllowedOnly: BigInt("2"),
      LenderNotAllowed: BigInt("3"),
      InvalidLendingAmount: BigInt("4"),
      InvalidCollateralAmount: BigInt("5"),
      InvalidInterestRate: BigInt("6"),
      InvalidDuration: BigInt("7"),
    },
  };

  at(address: string): LendingMarketplaceInstance {
    return new LendingMarketplaceInstance(address);
  }

  tests = {
    changeOwner: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { changeOwner: Address },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "changeOwner", params, getContractByCodeHash);
    },
    migrate: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { changeCode: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "migrate", params, getContractByCodeHash);
    },
    migrateWithFields: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        {
          changeCode: HexString;
          changeImmFieldsEncoded: HexString;
          changeMutFieldsEncoded: HexString;
        },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "changeOwnerApply",
        params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "migrateApply", params, getContractByCodeHash);
    },
    migrateWithFieldsApply: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "migrateWithFieldsApply",
        params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "resetUpgrade", params, getContractByCodeHash);
    },
    blockTimeStampInSeconds: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "blockTimeStampInSeconds",
        params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        {
          currentBlockTimeStamp: bigint;
          loanTimestamp: bigint;
          amount: bigint;
          interest: bigint;
          days: bigint;
        },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; interest: bigint; days: bigint },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { amount: bigint; feeRateValue: bigint },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getUpgradeDelay", params, getContractByCodeHash);
    },
    getOwner: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getOwner", params, getContractByCodeHash);
    },
    getNewOwner: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<Address, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getNewOwner", params, getContractByCodeHash);
    },
    getUpgradeInitiated: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "getUpgradeInitiated",
        params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getNewCode", params, getContractByCodeHash);
    },
    getNewImmFieldsEncoded: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "getNewImmFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<HexString, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "getNewMutFieldsEncoded",
        params,
        getContractByCodeHash
      );
    },
    resetFields: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "resetFields", params, getContractByCodeHash);
    },
    assertOnlyOwner: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { caller: Address },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "assertOnlyOwner", params, getContractByCodeHash);
    },
    assertUpgradeNotPending: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "assertUpgradeNotPending",
        params,
        getContractByCodeHash
      );
    },
    assertUpgradeDelayElapsed: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(
        this,
        "assertUpgradeDelayElapsed",
        params,
        getContractByCodeHash
      );
    },
    getTotalLoans: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getTotalLoans", params, getContractByCodeHash);
    },
    getFeeRate: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "getFeeRate", params, getContractByCodeHash);
    },
    createLoan: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        {
          lendingTokenId: HexString;
          collateralTokenId: HexString;
          lendingAmount: bigint;
          collateralAmount: bigint;
          interestRate: bigint;
          duration: bigint;
        },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<Address, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "createLoan", params, getContractByCodeHash);
    },
    borrow: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    cancelLoan: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "cancelLoan", params, getContractByCodeHash);
    },
    repayLoan: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "repayLoan", params, getContractByCodeHash);
    },
    liquidateLoan: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { loanId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "liquidateLoan", params, getContractByCodeHash);
    },
    updateFeeRate: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { value: bigint },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "updateFeeRate", params, getContractByCodeHash);
    },
    pauseLending: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "pauseLending", params, getContractByCodeHash);
    },
    enableLending: async (
      params: Omit<
        TestContractParams<
          LendingMarketplaceTypes.Fields,
          never,
          { feeTokens?: Map<HexString, boolean> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "enableLending", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { to: Address; tokenId: HexString; amount: bigint },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { tokenId: HexString; amount: bigint },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    addFeeToken: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { tokenId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "addFeeToken", params, getContractByCodeHash);
    },
    removeFeeToken: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { tokenId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<null, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "removeFeeToken", params, getContractByCodeHash);
    },
    isFeeToken: async (
      params: TestContractParams<
        LendingMarketplaceTypes.Fields,
        { tokenId: HexString },
        { feeTokens?: Map<HexString, boolean> }
      >
    ): Promise<
      TestContractResult<boolean, { feeTokens?: Map<HexString, boolean> }>
    > => {
      return testMethod(this, "isFeeToken", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const LendingMarketplace = new Factory(
  Contract.fromJson(
    LendingMarketplaceContractJson,
    "=144-1+8d=2-1+c=1-1=2-2+e6=2217-1+e=52+7a7e0214696e73657274206174206d617020706174683a2000=21-1+d=52+7a7e021472656d6f7665206174206d617020706174683a2000=64",
    "697181071bda7e64241aea164183e444ad2a5f008bf7ec5cee0faea29356756e",
    []
  )
);

// Use this class to interact with the blockchain
export class LendingMarketplaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    feeTokens: new RalphMap<HexString, boolean>(
      LendingMarketplace.contract,
      this.contractId,
      "feeTokens"
    ),
  };

  async fetchState(): Promise<LendingMarketplaceTypes.State> {
    return fetchContractState(LendingMarketplace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeChangeOwnerInitiatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.ChangeOwnerInitiatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "ChangeOwnerInitiated",
      fromCount
    );
  }

  subscribeChangeOwnerApplyEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.ChangeOwnerApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "ChangeOwnerApply",
      fromCount
    );
  }

  subscribeMigrateInitiatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.MigrateInitiatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "MigrateInitiated",
      fromCount
    );
  }

  subscribeMigrateApplyEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.MigrateApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "MigrateApply",
      fromCount
    );
  }

  subscribeMigrateWithFieldsInitiatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.MigrateWithFieldsInitiatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "MigrateWithFieldsInitiated",
      fromCount
    );
  }

  subscribeMigrateWithFieldsApplyEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.MigrateWithFieldsApplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "MigrateWithFieldsApply",
      fromCount
    );
  }

  subscribeLoanCreatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanCreated",
      fromCount
    );
  }

  subscribeLoanDetailsEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanDetailsEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanDetails",
      fromCount
    );
  }

  subscribeLoanCancelledEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanCancelledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanCancelled",
      fromCount
    );
  }

  subscribeLoanPaidEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanPaidEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanPaid",
      fromCount
    );
  }

  subscribeLoanAcceptedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanAcceptedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanAccepted",
      fromCount
    );
  }

  subscribeLoanLiquidatedEvent(
    options: EventSubscribeOptions<LendingMarketplaceTypes.LoanLiquidatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      LendingMarketplace.contract,
      this,
      options,
      "LoanLiquidated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LendingMarketplaceTypes.ChangeOwnerInitiatedEvent
      | LendingMarketplaceTypes.ChangeOwnerApplyEvent
      | LendingMarketplaceTypes.MigrateInitiatedEvent
      | LendingMarketplaceTypes.MigrateApplyEvent
      | LendingMarketplaceTypes.MigrateWithFieldsInitiatedEvent
      | LendingMarketplaceTypes.MigrateWithFieldsApplyEvent
      | LendingMarketplaceTypes.LoanCreatedEvent
      | LendingMarketplaceTypes.LoanDetailsEvent
      | LendingMarketplaceTypes.LoanCancelledEvent
      | LendingMarketplaceTypes.LoanPaidEvent
      | LendingMarketplaceTypes.LoanAcceptedEvent
      | LendingMarketplaceTypes.LoanLiquidatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      LendingMarketplace.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    changeOwner: async (
      params: LendingMarketplaceTypes.CallMethodParams<"changeOwner">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"changeOwner">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "changeOwner",
        params,
        getContractByCodeHash
      );
    },
    migrate: async (
      params: LendingMarketplaceTypes.CallMethodParams<"migrate">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"migrate">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "migrate",
        params,
        getContractByCodeHash
      );
    },
    migrateWithFields: async (
      params: LendingMarketplaceTypes.CallMethodParams<"migrateWithFields">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"migrateWithFields">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "migrateWithFields",
        params,
        getContractByCodeHash
      );
    },
    changeOwnerApply: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"changeOwnerApply">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"changeOwnerApply">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "changeOwnerApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateApply: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"migrateApply">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"migrateApply">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "migrateApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    migrateWithFieldsApply: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"migrateWithFieldsApply">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"migrateWithFieldsApply">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "migrateWithFieldsApply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    resetUpgrade: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"resetUpgrade">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"resetUpgrade">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "resetUpgrade",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    blockTimeStampInSeconds: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"blockTimeStampInSeconds">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "blockTimeStampInSeconds",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateTotalInterestPayment">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: LendingMarketplaceTypes.CallMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"calculateMarketplaceFee">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getUpgradeDelay: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getUpgradeDelay">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getUpgradeDelay">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getUpgradeDelay",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getOwner: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getOwner">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getOwner">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewOwner: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getNewOwner">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getNewOwner">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getNewOwner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getUpgradeInitiated: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getUpgradeInitiated">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"getUpgradeInitiated">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "getUpgradeInitiated",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewCode: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getNewCode">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getNewCode">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getNewCode",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewImmFieldsEncoded: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"getNewImmFieldsEncoded">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "getNewImmFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNewMutFieldsEncoded: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      LendingMarketplaceTypes.CallMethodResult<"getNewMutFieldsEncoded">
    > => {
      return callMethod(
        LendingMarketplace,
        this,
        "getNewMutFieldsEncoded",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalLoans: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getTotalLoans">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getTotalLoans">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getTotalLoans",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getFeeRate: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"getFeeRate">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"getFeeRate">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "getFeeRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"createLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"createLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "createLoan",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: LendingMarketplaceTypes.CallMethodParams<"borrow">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"borrow">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "borrow",
        params,
        getContractByCodeHash
      );
    },
    cancelLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"cancelLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"cancelLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "cancelLoan",
        params,
        getContractByCodeHash
      );
    },
    repayLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"repayLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"repayLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "repayLoan",
        params,
        getContractByCodeHash
      );
    },
    liquidateLoan: async (
      params: LendingMarketplaceTypes.CallMethodParams<"liquidateLoan">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"liquidateLoan">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "liquidateLoan",
        params,
        getContractByCodeHash
      );
    },
    updateFeeRate: async (
      params: LendingMarketplaceTypes.CallMethodParams<"updateFeeRate">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"updateFeeRate">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "updateFeeRate",
        params,
        getContractByCodeHash
      );
    },
    pauseLending: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"pauseLending">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"pauseLending">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "pauseLending",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    enableLending: async (
      params?: LendingMarketplaceTypes.CallMethodParams<"enableLending">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"enableLending">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "enableLending",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: LendingMarketplaceTypes.CallMethodParams<"withdraw">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: LendingMarketplaceTypes.CallMethodParams<"deposit">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    addFeeToken: async (
      params: LendingMarketplaceTypes.CallMethodParams<"addFeeToken">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"addFeeToken">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "addFeeToken",
        params,
        getContractByCodeHash
      );
    },
    removeFeeToken: async (
      params: LendingMarketplaceTypes.CallMethodParams<"removeFeeToken">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"removeFeeToken">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "removeFeeToken",
        params,
        getContractByCodeHash
      );
    },
    isFeeToken: async (
      params: LendingMarketplaceTypes.CallMethodParams<"isFeeToken">
    ): Promise<LendingMarketplaceTypes.CallMethodResult<"isFeeToken">> => {
      return callMethod(
        LendingMarketplace,
        this,
        "isFeeToken",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    changeOwner: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"changeOwner">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"changeOwner">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "changeOwner", params);
    },
    migrate: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"migrate">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"migrate">> => {
      return signExecuteMethod(LendingMarketplace, this, "migrate", params);
    },
    migrateWithFields: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"migrateWithFields">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"migrateWithFields">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "migrateWithFields",
        params
      );
    },
    changeOwnerApply: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"changeOwnerApply">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"changeOwnerApply">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "changeOwnerApply",
        params
      );
    },
    migrateApply: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"migrateApply">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"migrateApply">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "migrateApply",
        params
      );
    },
    migrateWithFieldsApply: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"migrateWithFieldsApply">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"migrateWithFieldsApply">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "migrateWithFieldsApply",
        params
      );
    },
    resetUpgrade: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"resetUpgrade">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"resetUpgrade">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "resetUpgrade",
        params
      );
    },
    blockTimeStampInSeconds: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"blockTimeStampInSeconds">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "blockTimeStampInSeconds",
        params
      );
    },
    calculateInterestPayment: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateInterestPayment">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateInterestPayment",
        params
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateTotalInterestPayment">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateTotalInterestPayment",
        params
      );
    },
    calculateMarketplaceFee: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"calculateMarketplaceFee">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "calculateMarketplaceFee",
        params
      );
    },
    getUpgradeDelay: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getUpgradeDelay">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getUpgradeDelay">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getUpgradeDelay",
        params
      );
    },
    getOwner: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getOwner">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"getOwner">> => {
      return signExecuteMethod(LendingMarketplace, this, "getOwner", params);
    },
    getNewOwner: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getNewOwner">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getNewOwner">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "getNewOwner", params);
    },
    getUpgradeInitiated: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getUpgradeInitiated">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getUpgradeInitiated">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getUpgradeInitiated",
        params
      );
    },
    getNewCode: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getNewCode">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getNewCode">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "getNewCode", params);
    },
    getNewImmFieldsEncoded: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getNewImmFieldsEncoded">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getNewImmFieldsEncoded">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getNewImmFieldsEncoded",
        params
      );
    },
    getNewMutFieldsEncoded: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getNewMutFieldsEncoded">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getNewMutFieldsEncoded">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getNewMutFieldsEncoded",
        params
      );
    },
    getTotalLoans: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getTotalLoans">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getTotalLoans">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "getTotalLoans",
        params
      );
    },
    getFeeRate: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"getFeeRate">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"getFeeRate">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "getFeeRate", params);
    },
    createLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"createLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"createLoan">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "createLoan", params);
    },
    borrow: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"borrow">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(LendingMarketplace, this, "borrow", params);
    },
    cancelLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"cancelLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"cancelLoan">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "cancelLoan", params);
    },
    repayLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"repayLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"repayLoan">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "repayLoan", params);
    },
    liquidateLoan: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"liquidateLoan">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"liquidateLoan">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "liquidateLoan",
        params
      );
    },
    updateFeeRate: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"updateFeeRate">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"updateFeeRate">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "updateFeeRate",
        params
      );
    },
    pauseLending: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"pauseLending">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"pauseLending">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "pauseLending",
        params
      );
    },
    enableLending: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"enableLending">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"enableLending">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "enableLending",
        params
      );
    },
    withdraw: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(LendingMarketplace, this, "withdraw", params);
    },
    deposit: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"deposit">
    ): Promise<LendingMarketplaceTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(LendingMarketplace, this, "deposit", params);
    },
    addFeeToken: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"addFeeToken">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"addFeeToken">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "addFeeToken", params);
    },
    removeFeeToken: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"removeFeeToken">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"removeFeeToken">
    > => {
      return signExecuteMethod(
        LendingMarketplace,
        this,
        "removeFeeToken",
        params
      );
    },
    isFeeToken: async (
      params: LendingMarketplaceTypes.SignExecuteMethodParams<"isFeeToken">
    ): Promise<
      LendingMarketplaceTypes.SignExecuteMethodResult<"isFeeToken">
    > => {
      return signExecuteMethod(LendingMarketplace, this, "isFeeToken", params);
    },
  };

  async multicall<Callss extends LendingMarketplaceTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<LendingMarketplaceTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      LendingMarketplace,
      this,
      callss,
      getContractByCodeHash
    )) as LendingMarketplaceTypes.MulticallReturnType<Callss>;
  }
}
