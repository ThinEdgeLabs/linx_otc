Contract LendingMarketplace(
  lendingOfferTemplateId: ByteVec,
  mut admin: Address,
  mut totalLendingOffers: U256,
  mut fee: U256,
  mut lendingEnabled: Bool
) extends LendingMarketplaceUtils() {

  event AdminUpdated(
    previous: Address,
    new: Address
  )

  event LoanDetails(
    loanId: ByteVec,
    lendingTokenId: ByteVec,
    collateralTokenId: ByteVec,
    lendingAmount: U256,
    collateralAmount: U256,
    interestRate: U256,
    duration: U256,
    lender: Address
  )

  event LoanCreated(loanId: ByteVec, id: U256, by: Address, timestamp: U256)
  event LoanCancelled(loanId: ByteVec, by: Address, timestamp: U256)
  event LoanPaid(loanId: ByteVec, by: Address, timestamp: U256)
  event LoanAccepted(loanId: ByteVec, by: Address, timestamp: U256)
  event LoanLiquidated(loanId: ByteVec, by: Address, timestamp: U256)

  enum ErrorCodes {
    AdminAllowedOnly = 0
    LendingDisabled = 1
    LenderAllowedOnly = 2
    BorrowerAllowedOnly = 3
    LenderNotAllowed = 4
  }

  pub fn getAdmin() -> Address {
    return admin
  }

  pub fn getTotalLendingOffers() -> U256 {
    return totalLendingOffers
  }

  pub fn getFee() -> U256 {
    return fee
  }

  @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
  pub fn createLendingOffer(
    lendingTokenId: ByteVec,
    collateralTokenId: ByteVec,
    lendingAmount: U256,
    collateralAmount: U256,
    interestRate: U256,
    duration: U256
  ) -> (Address) {
    assert!(lendingEnabled == true, ErrorCodes.LendingDisabled)
    let lender = callerAddress!()

    // Checking for overflow
    let _ = calculateTotalInterestPayment(lendingAmount, interestRate, duration)

    let key = toByteVec!(totalLendingOffers)
    let id = totalLendingOffers
    let (encodeImmutableFields, encodeMutableFields) = LendingOffer.encodeFields!(id, lender, lendingTokenId, collateralTokenId, selfContractId!(), lendingAmount, collateralAmount, interestRate, duration, nullContractAddress!(), 0)
    let loanId = copyCreateSubContract!{lender -> ALPH: 1 alph, lendingTokenId: lendingAmount}(
      key, lendingOfferTemplateId, encodeImmutableFields, encodeMutableFields
    )
    totalLendingOffers = totalLendingOffers + 1

    emit LoanDetails(loanId, lendingTokenId, collateralTokenId, lendingAmount, collateralAmount, interestRate, duration, lender)
    emit LoanCreated(loanId, id, lender, blockTimeStamp!())

    return contractIdToAddress!(loanId)
  }

  @using(preapprovedAssets = true)
  pub fn borrow(offerId: ByteVec) -> () {
    let offer = LendingOffer(offerId)
    let lender = offer.getLender()
    let collateralTokenId = offer.getCollateralTokenId()
    let collateralAmount = offer.getCollateralAmount()
    checkCaller!(callerAddress!() != lender, ErrorCodes.LenderNotAllowed)
    let caller = callerAddress!()
    offer.take{caller -> collateralTokenId: collateralAmount}(caller)
    emit LoanAccepted(offerId, caller, blockTimeStamp!())
  }

  pub fn cancelOffer(loanId: ByteVec) -> () {
    let offer = LendingOffer(loanId)
    let lender = offer.getLender()
    checkCaller!(callerAddress!() == lender, ErrorCodes.LenderAllowedOnly)
    offer.cancel()
    emit LoanCancelled(loanId, callerAddress!(), blockTimeStamp!())
  }

  @using(preapprovedAssets = true)
  pub fn paybackLoan(loanId: ByteVec) -> () {
    let loan = LendingOffer(loanId)
    let borrower = loan.getBorrower()
    let lendingTokenId = loan.getLendingTokenId()
    let loanAmount = loan.getLendingAmount()
    let interest = loan.getInterest()
    let caller = callerAddress!()
    checkCaller!(caller == borrower, ErrorCodes.BorrowerAllowedOnly)
    loan.payback{caller -> lendingTokenId: loanAmount + interest}()
    emit LoanPaid(loanId, caller, blockTimeStamp!())
  }

  pub fn liquidateLoan(loanId: ByteVec) -> () {
    let loan = LendingOffer(loanId)
    let lender = loan.getLender()
    checkCaller!(callerAddress!() == lender, ErrorCodes.LenderAllowedOnly)
    loan.liquidate()
    emit LoanLiquidated(loanId, callerAddress!(), blockTimeStamp!())
  }

  @using(updateFields = true)
  pub fn updateAdmin(newAdmin: Address) -> () {
    checkCaller!(callerAddress!() == admin, ErrorCodes.AdminAllowedOnly)

    emit AdminUpdated(admin, newAdmin)
    admin = newAdmin
  }

  @using(updateFields = true)
  pub fn updateFee(newFee: U256) -> () {
    checkCaller!(callerAddress!() == admin, ErrorCodes.AdminAllowedOnly)

    fee = newFee
  }

  @using(updateFields = true)
  pub fn updateLendingEnabled(enabled: Bool) -> () {
    checkCaller!(callerAddress!() == admin, ErrorCodes.AdminAllowedOnly)
    lendingEnabled = enabled
  }
}