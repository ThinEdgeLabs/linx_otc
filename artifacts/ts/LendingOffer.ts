/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as LendingOfferContractJson } from "../LendingOffer.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace LendingOfferTypes {
  export type Fields = {
    id: bigint;
    lender: Address;
    lendingTokenId: HexString;
    collateralTokenId: HexString;
    marketplaceContractId: HexString;
    lendingAmount: bigint;
    collateralAmount: bigint;
    interestRate: bigint;
    duration: bigint;
    borrower: Address;
    loanTimeStamp: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    blockTimeStampInSeconds: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    calculateInterestPayment: {
      params: CallContractParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateTotalInterestPayment: {
      params: CallContractParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMarketplaceFee: {
      params: CallContractParams<{ amount: bigint; feeRate: bigint }>;
      result: CallContractResult<bigint>;
    };
    getId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLender: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getLendingTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollateralTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getLendingAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getCollateralAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getInterestRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getInterest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getDuration: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBorrower: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getLoanTimeStamp: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    take: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
    cancel: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    payback: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    blockTimeStampInSeconds: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateInterestPayment: {
      params: SignExecuteContractMethodParams<{
        currentBlockTimeStamp: bigint;
        loanTimestamp: bigint;
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateTotalInterestPayment: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        interest: bigint;
        days: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateMarketplaceFee: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        feeRate: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLender: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLendingTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollateralTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLendingAmount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollateralAmount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getInterestRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getInterest: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDuration: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getBorrower: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLoanTimeStamp: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    take: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
    cancel: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    payback: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  LendingOfferInstance,
  LendingOfferTypes.Fields
> {
  encodeFields(fields: LendingOfferTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as LendingOfferTypes.Fields;
  }

  consts = {
    Day: BigInt("86400"),
    ErrorCodes: {
      MarketplaceAllowedOnly: BigInt("0"),
      LoanIsActive: BigInt("1"),
      LoanNotActive: BigInt("2"),
      LoanNotOverdue: BigInt("3"),
    },
  };

  at(address: string): LendingOfferInstance {
    return new LendingOfferInstance(address);
  }

  tests = {
    blockTimeStampInSeconds: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "blockTimeStampInSeconds",
        params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: TestContractParamsWithoutMaps<
        LendingOfferTypes.Fields,
        {
          currentBlockTimeStamp: bigint;
          loanTimestamp: bigint;
          amount: bigint;
          interest: bigint;
          days: bigint;
        }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: TestContractParamsWithoutMaps<
        LendingOfferTypes.Fields,
        { amount: bigint; interest: bigint; days: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: TestContractParamsWithoutMaps<
        LendingOfferTypes.Fields,
        { amount: bigint; feeRate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getId: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getId", params, getContractByCodeHash);
    },
    getLender: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getLender", params, getContractByCodeHash);
    },
    getLendingTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getLendingTokenId",
        params,
        getContractByCodeHash
      );
    },
    getCollateralTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getCollateralTokenId",
        params,
        getContractByCodeHash
      );
    },
    getLendingAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getLendingAmount",
        params,
        getContractByCodeHash
      );
    },
    getCollateralAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getCollateralAmount",
        params,
        getContractByCodeHash
      );
    },
    getInterestRate: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getInterestRate", params, getContractByCodeHash);
    },
    getInterest: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getInterest", params, getContractByCodeHash);
    },
    getDuration: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getDuration", params, getContractByCodeHash);
    },
    getBorrower: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getBorrower", params, getContractByCodeHash);
    },
    getLoanTimeStamp: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getLoanTimeStamp",
        params,
        getContractByCodeHash
      );
    },
    take: async (
      params: TestContractParamsWithoutMaps<
        LendingOfferTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "take", params, getContractByCodeHash);
    },
    cancel: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cancel", params, getContractByCodeHash);
    },
    payback: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "payback", params, getContractByCodeHash);
    },
    liquidate: async (
      params: Omit<
        TestContractParamsWithoutMaps<LendingOfferTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const LendingOffer = new Factory(
  Contract.fromJson(
    LendingOfferContractJson,
    "",
    "d2c432f8018e11a345993f86b0a43104035c6c00c5157269dbf833a0ba1d08b6",
    []
  )
);

// Use this class to interact with the blockchain
export class LendingOfferInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<LendingOfferTypes.State> {
    return fetchContractState(LendingOffer, this);
  }

  view = {
    blockTimeStampInSeconds: async (
      params?: LendingOfferTypes.CallMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingOfferTypes.CallMethodResult<"blockTimeStampInSeconds">
    > => {
      return callMethod(
        LendingOffer,
        this,
        "blockTimeStampInSeconds",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateInterestPayment: async (
      params: LendingOfferTypes.CallMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingOfferTypes.CallMethodResult<"calculateInterestPayment">
    > => {
      return callMethod(
        LendingOffer,
        this,
        "calculateInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingOfferTypes.CallMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingOfferTypes.CallMethodResult<"calculateTotalInterestPayment">
    > => {
      return callMethod(
        LendingOffer,
        this,
        "calculateTotalInterestPayment",
        params,
        getContractByCodeHash
      );
    },
    calculateMarketplaceFee: async (
      params: LendingOfferTypes.CallMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingOfferTypes.CallMethodResult<"calculateMarketplaceFee">
    > => {
      return callMethod(
        LendingOffer,
        this,
        "calculateMarketplaceFee",
        params,
        getContractByCodeHash
      );
    },
    getId: async (
      params?: LendingOfferTypes.CallMethodParams<"getId">
    ): Promise<LendingOfferTypes.CallMethodResult<"getId">> => {
      return callMethod(
        LendingOffer,
        this,
        "getId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLender: async (
      params?: LendingOfferTypes.CallMethodParams<"getLender">
    ): Promise<LendingOfferTypes.CallMethodResult<"getLender">> => {
      return callMethod(
        LendingOffer,
        this,
        "getLender",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLendingTokenId: async (
      params?: LendingOfferTypes.CallMethodParams<"getLendingTokenId">
    ): Promise<LendingOfferTypes.CallMethodResult<"getLendingTokenId">> => {
      return callMethod(
        LendingOffer,
        this,
        "getLendingTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollateralTokenId: async (
      params?: LendingOfferTypes.CallMethodParams<"getCollateralTokenId">
    ): Promise<LendingOfferTypes.CallMethodResult<"getCollateralTokenId">> => {
      return callMethod(
        LendingOffer,
        this,
        "getCollateralTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLendingAmount: async (
      params?: LendingOfferTypes.CallMethodParams<"getLendingAmount">
    ): Promise<LendingOfferTypes.CallMethodResult<"getLendingAmount">> => {
      return callMethod(
        LendingOffer,
        this,
        "getLendingAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollateralAmount: async (
      params?: LendingOfferTypes.CallMethodParams<"getCollateralAmount">
    ): Promise<LendingOfferTypes.CallMethodResult<"getCollateralAmount">> => {
      return callMethod(
        LendingOffer,
        this,
        "getCollateralAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getInterestRate: async (
      params?: LendingOfferTypes.CallMethodParams<"getInterestRate">
    ): Promise<LendingOfferTypes.CallMethodResult<"getInterestRate">> => {
      return callMethod(
        LendingOffer,
        this,
        "getInterestRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getInterest: async (
      params?: LendingOfferTypes.CallMethodParams<"getInterest">
    ): Promise<LendingOfferTypes.CallMethodResult<"getInterest">> => {
      return callMethod(
        LendingOffer,
        this,
        "getInterest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDuration: async (
      params?: LendingOfferTypes.CallMethodParams<"getDuration">
    ): Promise<LendingOfferTypes.CallMethodResult<"getDuration">> => {
      return callMethod(
        LendingOffer,
        this,
        "getDuration",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBorrower: async (
      params?: LendingOfferTypes.CallMethodParams<"getBorrower">
    ): Promise<LendingOfferTypes.CallMethodResult<"getBorrower">> => {
      return callMethod(
        LendingOffer,
        this,
        "getBorrower",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLoanTimeStamp: async (
      params?: LendingOfferTypes.CallMethodParams<"getLoanTimeStamp">
    ): Promise<LendingOfferTypes.CallMethodResult<"getLoanTimeStamp">> => {
      return callMethod(
        LendingOffer,
        this,
        "getLoanTimeStamp",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    take: async (
      params: LendingOfferTypes.CallMethodParams<"take">
    ): Promise<LendingOfferTypes.CallMethodResult<"take">> => {
      return callMethod(
        LendingOffer,
        this,
        "take",
        params,
        getContractByCodeHash
      );
    },
    cancel: async (
      params?: LendingOfferTypes.CallMethodParams<"cancel">
    ): Promise<LendingOfferTypes.CallMethodResult<"cancel">> => {
      return callMethod(
        LendingOffer,
        this,
        "cancel",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    payback: async (
      params?: LendingOfferTypes.CallMethodParams<"payback">
    ): Promise<LendingOfferTypes.CallMethodResult<"payback">> => {
      return callMethod(
        LendingOffer,
        this,
        "payback",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    liquidate: async (
      params?: LendingOfferTypes.CallMethodParams<"liquidate">
    ): Promise<LendingOfferTypes.CallMethodResult<"liquidate">> => {
      return callMethod(
        LendingOffer,
        this,
        "liquidate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    blockTimeStampInSeconds: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"blockTimeStampInSeconds">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"blockTimeStampInSeconds">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "blockTimeStampInSeconds",
        params
      );
    },
    calculateInterestPayment: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"calculateInterestPayment">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"calculateInterestPayment">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "calculateInterestPayment",
        params
      );
    },
    calculateTotalInterestPayment: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"calculateTotalInterestPayment">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"calculateTotalInterestPayment">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "calculateTotalInterestPayment",
        params
      );
    },
    calculateMarketplaceFee: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"calculateMarketplaceFee">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"calculateMarketplaceFee">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "calculateMarketplaceFee",
        params
      );
    },
    getId: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getId">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"getId">> => {
      return signExecuteMethod(LendingOffer, this, "getId", params);
    },
    getLender: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getLender">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"getLender">> => {
      return signExecuteMethod(LendingOffer, this, "getLender", params);
    },
    getLendingTokenId: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getLendingTokenId">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getLendingTokenId">
    > => {
      return signExecuteMethod(LendingOffer, this, "getLendingTokenId", params);
    },
    getCollateralTokenId: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getCollateralTokenId">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getCollateralTokenId">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "getCollateralTokenId",
        params
      );
    },
    getLendingAmount: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getLendingAmount">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getLendingAmount">
    > => {
      return signExecuteMethod(LendingOffer, this, "getLendingAmount", params);
    },
    getCollateralAmount: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getCollateralAmount">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getCollateralAmount">
    > => {
      return signExecuteMethod(
        LendingOffer,
        this,
        "getCollateralAmount",
        params
      );
    },
    getInterestRate: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getInterestRate">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getInterestRate">
    > => {
      return signExecuteMethod(LendingOffer, this, "getInterestRate", params);
    },
    getInterest: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getInterest">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"getInterest">> => {
      return signExecuteMethod(LendingOffer, this, "getInterest", params);
    },
    getDuration: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getDuration">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"getDuration">> => {
      return signExecuteMethod(LendingOffer, this, "getDuration", params);
    },
    getBorrower: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getBorrower">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"getBorrower">> => {
      return signExecuteMethod(LendingOffer, this, "getBorrower", params);
    },
    getLoanTimeStamp: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"getLoanTimeStamp">
    ): Promise<
      LendingOfferTypes.SignExecuteMethodResult<"getLoanTimeStamp">
    > => {
      return signExecuteMethod(LendingOffer, this, "getLoanTimeStamp", params);
    },
    take: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"take">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"take">> => {
      return signExecuteMethod(LendingOffer, this, "take", params);
    },
    cancel: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"cancel">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"cancel">> => {
      return signExecuteMethod(LendingOffer, this, "cancel", params);
    },
    payback: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"payback">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"payback">> => {
      return signExecuteMethod(LendingOffer, this, "payback", params);
    },
    liquidate: async (
      params: LendingOfferTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<LendingOfferTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(LendingOffer, this, "liquidate", params);
    },
  };

  async multicall<Calls extends LendingOfferTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LendingOfferTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      LendingOffer,
      this,
      calls,
      getContractByCodeHash
    )) as LendingOfferTypes.MultiCallResults<Calls>;
  }
}
