Contract LendingOffer(
  id: U256,
  lender: Address,
  lendingTokenId: ByteVec,
  collateralTokenId: ByteVec,
  marketplaceContractId: ByteVec,
  lendingAmount: U256,
  collateralAmount: U256,
  interestRate: U256, // in basis points
  duration: U256, // in days
  mut borrower: Address,
  mut loanTimeStamp: U256 // in seconds
) extends LendingMarketplaceUtils() {

  enum ErrorCodes {
    MarketplaceAllowedOnly = 0
    LoanIsActive = 1
    LoanNotActive = 2
    LoanNotOverdue = 3
  }

  pub fn getId() -> U256 {
    return id
  }

  pub fn getLender() -> Address {
    return lender
  }

  pub fn getLendingTokenId() -> ByteVec {
    return lendingTokenId
  }

  pub fn getCollateralTokenId() -> ByteVec {
    return collateralTokenId
  }

  pub fn getLendingAmount() -> U256 {
    return lendingAmount
  }

  pub fn getCollateralAmount() -> U256 {
    return collateralAmount
  }

  pub fn getInterestRate() -> U256 {
    return interestRate
  }

  pub fn getInterest() -> U256 {
    return lendingAmount * interestRate / 10000
  }

  pub fn getDuration() -> U256 {
    return duration
  }

  pub fn getBorrower() -> Address {
    return borrower
  }

  pub fn getLoanTimeStamp() -> U256 {
    return loanTimeStamp
  }

  @using(assetsInContract = true, preapprovedAssets = true, updateFields = true)
  pub fn take(caller: Address) -> () {
    checkCaller!(callerContractId!() == marketplaceContractId, ErrorCodes.MarketplaceAllowedOnly)
    assert!(borrower == nullContractAddress!(), ErrorCodes.LoanIsActive)

    // TODO: Pay the fee to the marketplace

    loanTimeStamp = blockTimeStampInSeconds()
    borrower = caller

    transferTokenToSelf!(borrower, collateralTokenId, collateralAmount)
    transferTokenFromSelf!(borrower, lendingTokenId, lendingAmount)
  }

  @using(assetsInContract = true)
  pub fn cancel() -> () {
    checkCaller!(callerContractId!() == marketplaceContractId, ErrorCodes.MarketplaceAllowedOnly)
    assert!(borrower == nullContractAddress!(), ErrorCodes.LoanIsActive)
    destroySelf!(lender)
  }

  @using(assetsInContract = true, preapprovedAssets = true)
  pub fn payback() -> () {
    checkCaller!(callerContractId!() == marketplaceContractId, ErrorCodes.MarketplaceAllowedOnly)

    let interest = getInterest()
    transferToken!(borrower, lender, lendingTokenId, lendingAmount + interest)
    transferTokenFromSelf!(borrower, collateralTokenId, collateralAmount)

    destroySelf!(lender)
  }

  @using(assetsInContract = true)
  pub fn liquidate() -> () {
    checkCaller!(callerContractId!() == marketplaceContractId, ErrorCodes.MarketplaceAllowedOnly)
    assert!(borrower != lender, ErrorCodes.LoanNotActive)

    let currentBlockTimeStamp = blockTimeStampInSeconds()
    assert!(currentBlockTimeStamp > loanTimeStamp + duration * Day, ErrorCodes.LoanNotOverdue)

    destroySelf!(lender)
  }
}